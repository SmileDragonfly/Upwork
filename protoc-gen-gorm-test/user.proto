syntax = "proto3";
option go_package = "./user.pb";

import "gorm.proto";

message User {
  option (gorm.opts).ormable = true;
  uint64 id = 1;
  string name = 2;
  string emails = 3;
  string home_address = 4;
  string phone_number = 5;
  string description = 6;
}

message CreateUserRequest {
  // Convention dictates that this field be of the given type, and be
  // named 'payload' in order to autogenerate the handler
  User payload = 1;
}

message CreateUserResponse {
  // Convention also requires that the return type be the same and named 'result'
  User result = 1;
}

message ReadUserRequest {
  // For a read request, the id field is the only to be specified
  uint64 id = 1;
}

message ReadUserResponse {
  // Again the type with 'result' name
  User result = 1;
}

message UpdateUserRequest {
  // named 'payload' in order to autogenerate the handler
    User payload = 1;
}

message UpdateUserResponse {
  // Again the type with 'result' name
  User result = 1;
}

// By convention, on DELETE no response data is given, so either a
// google.protobuf.empty, or an empty struct is sufficient
message DeleteUserRequest {
  // Only the id is needed for a delete request
  uint64 id = 1;
}

message DeleteUserResponse {
}

service UserService {
  option (gorm.server).autogen = true;
  rpc Create (CreateUserRequest) returns (CreateUserResponse) {
  }
  rpc Read (ReadUserRequest) returns (ReadUserResponse) {
  }
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
  }
  rpc Delete (DeleteUserRequest) returns (DeleteUserResponse) {
    // This option is required because the type/table can't be inferred
    // by the return type
    option (gorm.method).object_type = "User";
  }
}